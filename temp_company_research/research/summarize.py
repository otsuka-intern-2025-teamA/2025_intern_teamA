import os
from typing import List, Dict, Tuple
from openai import AzureOpenAI
import asyncio

DEPLOYMENT = os.environ["AZURE_OPENAI_DEPLOYMENT"]
CLIENT = AzureOpenAI(
    api_key=os.environ["AZURE_OPENAI_API_KEY"],
    api_version=os.environ["AZURE_OPENAI_API_VERSION"],
    azure_endpoint=os.environ["AZURE_OPENAI_ENDPOINT"],
)

SECTION_PROMPTS = {
    "profile": "Summarize the company's core business, business model, key subsidiaries, regions, and customers.",
    "products": "List major products/services and notable technologies or partnerships. Group by category.",
    "market": "Explain the industry landscape, main competitors, differentiators, and go-to-market.",
    "financials": "Summarize available financials (revenue, profit, funding) or best public proxies if private.",
    "news": "Summarize notable news/events in the last 12 months, with dates."
}

def _pick_top_sources(docs: List[Dict], k: int = 12) -> List[Dict]:
    # MVP：テキストの長さで上位k件を選択
    ranked = sorted(docs, key=lambda d: len(d.get("text","")), reverse=True)
    return ranked[:k]

def _build_context_and_sources(docs: List[Dict], k_ctx_chars: int = 120_000) -> Tuple[str, List[Dict]]:
    top = _pick_top_sources(docs, k=12)
    # 引用用のidを付与
    sources = []
    for i, d in enumerate(top, start=1):
        sources.append({"id": i, "url": d["url"], "title": (d.get("title") or d["url"])[:160]})
    # ソースマーカー付きでコンテキストを構築
    chunks = []
    for s, d in zip(sources, top):
        chunks.append(f"[SOURCE {s['id']}] {d['url']}\n{d['text']}\n")
    corpus = "\n\n".join(chunks)[:k_ctx_chars]
    return corpus, sources

async def _chat_once(messages: List[Dict]) -> str:
    # Azureの一部gpt-5-miniデプロイメントではtemperatureを変更できないため、指定しません。
    def call():
        resp = CLIENT.chat.completions.create(
            model=DEPLOYMENT,
            messages=messages,
        )
        return resp.choices[0].message.content.strip()
    return await asyncio.to_thread(call)

async def make_briefings(company: str, docs: List[Dict], locale: str, sections: List[str]) -> Dict[str, str]:
    context, sources = _build_context_and_sources(docs)
    sys = (
        "You are a diligent equity/industry analyst. "
        "Use ONLY the provided context. "
        "When stating a fact, append a citation like [1] that corresponds to SOURCE ids. "
        "If unsure, say 'unknown'. Write concisely in the requested language."
    )
    out: Dict[str, str] = {}
    tasks = {}
    for sec in sections:
        instr = SECTION_PROMPTS.get(sec, sec)
        user = (
            f"Company: {company}\n"
            f"Locale: {locale}\n"
            f"Task: {instr}\n\n"
            f"=== CONTEXT START ===\n{context}\n=== CONTEXT END ==="
        )
        tasks[sec] = _chat_once([
            {"role":"system","content": sys},
            {"role":"user","content": user}
        ])
    results = await asyncio.gather(*tasks.values())
    for (sec, text) in zip(tasks.keys(), results):
        out[sec] = text
    return out

async def compile_markdown(company: str, briefings: Dict[str, str], docs: List[Dict]) -> Tuple[str, List[Dict]]:
    _, sources = _build_context_and_sources(docs)  # 同じトップソースをリンクリストとして使用
    order = ["profile","products","market","financials","news"]
    md_parts = [f"# {company}", "## Executive Summary", "_Auto-generated summary based on public sources._\n"]
    for sec in order:
        if sec in briefings:
            title = sec.title()
            md_parts.append(f"## {title}\n{briefings[sec]}\n")
    # ソース一覧
    md_parts.append("## Sources")
    for s in sources:
        md_parts.append(f"[{s['id']}] {s['title']} — {s['url']}")
    md_parts.append("\n---\n*Generated by Company Research Backend (Tavily + Azure OpenAI gpt-5-mini).*")
    return "\n".join(md_parts), sources
